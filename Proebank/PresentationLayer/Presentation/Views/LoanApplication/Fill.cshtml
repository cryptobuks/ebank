@model Domain.Models.Loans.LoanApplication

@{
    ViewBag.Title = "Fill";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Fill the application</h2>

<div class="container">
    @using (Html.BeginForm("Fill", "LoanApplication", FormMethod.Post, new { @class = "form"}))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <div class="row">
            <div class="col-md-12">
                <input type="submit" value="Update" class="btn btn-success" />
                <input type="button" value="Random" class="btn btn-default" onclick="fillRandomData();" />
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-3">
                <h4>Application information</h4>
                <div class="form-group">
                    @Html.LabelFor(model => model.LoanAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.LoanAmount, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LoanAmount, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Term, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Term, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Term, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CellPhone, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.CellPhone, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CellPhone, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Tariff, "TariffId", new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownListFor(model => model.TariffId, (IEnumerable<SelectListItem>)ViewBag.Tariff, String.Empty)
                        @Html.ValidationMessageFor(model => model.Tariff, null, new { @class = "help-inline" })
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <h4>Debtor personal information</h4>
                <div class="form-group">
                    <div class="controls">
                        @Html.EditorFor(model => model.PersonalData, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PersonalData, null, new { @class = "help-inline" })
                    </div>
                </div>

            </div>

            <div class="col-md-3">
                <h4>Debtor personal information</h4>
                <div class="form-group">
                    @Html.LabelFor(model => model.MiddleIncome, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.MiddleIncome, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MiddleIncome, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ChildrenCount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.ChildrenCount, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ChildrenCount, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.HigherEducation, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.HigherEducation, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.HigherEducation, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsMarried, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.IsMarried, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IsMarried, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LengthOfWork, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.LengthOfWork, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LengthOfWork, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsHomeowner, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.IsHomeowner, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IsHomeowner, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="controls">
                        @Html.HiddenFor(model => model.LoanPurpose)
                        @Html.ValidationMessageFor(model => model.LoanPurpose, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="controls">
                        @Html.HiddenFor(model => model.Currency)
                        @Html.ValidationMessageFor(model => model.Currency, null, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="controls">
                        @Html.HiddenFor(model => model.TimeCreated)
                        @Html.ValidationMessageFor(model => model.TimeCreated, null, new { @class = "help-inline" })
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div id="guarantorInfo">
                    <h4>Guarantor personal information</h4>
                    <div class="form-group">
                        <div class="controls">
                            @Html.EditorFor(model => model.Guarantor, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Guarantor, null, new { @class = "help-inline" })
                        </div>
                    </div>
                </div>
            </div>
        </div>

    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        window.tariffGuarantor = @Html.Raw(Json.Encode(ViewBag.tariffGuarantor))
        $('#TariffId').on('change', function (e) {
            var value = e.target.value;
            var isNeeded = false;
            for (var i = 0; i < window.tariffGuarantor.length; i++) {
                if (window.tariffGuarantor[i].Id == value) {
                    isNeeded = window.tariffGuarantor[i].isGuarantorNeeded;
                }
            }
            if (isNeeded) {
                $('#guarantorInfo').show();
            } else {
                $('#guarantorInfo').hide();
            }
        });
    </script>

    <!--Random data filling-->
    <script type="text/javascript">
        function fillRandomData() {
            $('#LoanAmount').val(rand(1, 100) * 1000000);
            $('#Term').val(rand(2, 12) * 3);
            $('#CellPhone').val(rand(1111111, 9999999));
            $('#TariffId').val(randSelect($('#TariffId')));
            $('#PersonalData_LastName').val(chance.last());
            $('#PersonalData_FirstName').val(chance.first());
            $('#PersonalData_MiddleName').val(chance.name({ middle: true }).split(" ")[1]);
            var b = chance.birthday();
            $('#PersonalData_DateOfBirth').val("" + b.getDate() + "-" + (b.getMonth() + 1) + "-" + b.getFullYear());
            $('#PersonalData_Passport').val(randStr(2) + randNum(7));
            $('#PersonalData_Identification').val("" + randNum(7) + randStr(1) + randNum(3) + randStr(2) + randNum());
            $('#PersonalData_Address').val(chance.address());
            $('#MiddleIncome').val(rand(1000000, 30000000));
            $('#ChildrenCount').val(rand(0, 4));
            $('#HigherEducation').val(randSelect($('#HigherEducation')));
            $('#IsMarried').val(randSelect($('#IsMarried')));
            $('#LengthOfWork').val(rand(1, 10));
            $('#IsHomeowner').get(0).checked = rand(0, 1) === 0;

            $('#Guarantor_LastName').val(chance.last());
            $('#Guarantor_FirstName').val(chance.first());
            $('#Guarantor_MiddleName').val(chance.name({ middle: true }).split(" ")[1]);
            var b = chance.birthday();
            $('#Guarantor_DateOfBirth').val("" + b.getDate() + "-" + (b.getMonth() + 1) + "-" + b.getFullYear());
            $('#Guarantor_Passport').val(randStr(2) + randNum(7));
            $('#Guarantor_Identification').val("" + randNum(7) + randStr(1) + randNum(3) + randStr(2) + randNum());
            $('#Guarantor_Address').val(chance.address());
            
            
        }

        function rand(from, to) {
            from = from || 0;
            to = to || 1;
            return Math.round(Math.random() * (to - from) + from);
        }

        function randNum(length) {
            length = length || 1;
            var from = Math.pow(10, length - 1);
            var to = Math.pow(10, length) - 1;
            return rand(from, to);
        }

        function randStr(length) {
            length = length || 1;
            return chance.word({ length: length }).toUpperCase();
        }
        
        function randSelect(select) {
            var values = [];
            $.each(select.children(), function (i, v) {
                if (v.value) {
                    values.push(v.value);
                }
            });
            return (values[rand(0, values.length - 1)]);
        }
    </script>
}

